{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.23.0+5f80d73", "config": "model = dict(\n    type='STCN',\n    init_cfg=dict(type='Kaiming', layer='Conv2d'),\n    seg_background=False,\n    max_per_frame=2,\n    key_encoder=dict(\n        type='KeyEncoder',\n        backbone=dict(\n            type='ResNet',\n            depth=50,\n            out_indices=(0, 1, 2),\n            frozen_stages=3,\n            init_cfg=dict(\n                type='Pretrained', checkpoint='torchvision://resnet50')),\n        key_proj=dict(\n            type='KeyProjection', indim=1024, keydim=64, ortho_init=True),\n        key_comp=dict(type='KeyProjection', indim=1024, keydim=512)),\n    value_encoder=dict(\n        type='ValueEncoder',\n        backbone=dict(\n            type='ResNet', depth=18, in_channels=4, out_indices=(2, )),\n        feature_fusion=dict(type='FeatureFusionBlock', indim=1280,\n                            outdim=512)),\n    mask_decoder=dict(type='MaskDecoder', indim=512),\n    memory=dict(\n        type='AffinityMemoryBank',\n        top_k=-1,\n        mem_every=5,\n        include_last=False,\n        thin_reading_scale=8),\n    loss_fn=dict(\n        type='BootstrappedCE', start_warm=10000, end_warm=40000, top_p=0.15))\ncustom_imports = dict(\n    imports=['stcn.loss.bce', 'stcn.model'], allow_failed_imports=False)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=25,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nfind_unused_parameters = True\ndata = dict(\n    workers_per_gpu=0,\n    samples_per_gpu=4,\n    nums_frame=4,\n    train=dict(\n        type='VOSDataset',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='EnAlbu'),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomResizedCrop',\n                        height=480,\n                        width=896,\n                        scale=(0.8, 1.0),\n                        ratio=(0.7, 1.3),\n                        p=1),\n                    dict(type='ShiftScaleRotate', p=0.9),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(type='ChannelShuffle', p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                p=1.0,\n                                r_shift_limit=(-20, 20),\n                                g_shift_limit=(-20, 20),\n                                b_shift_limit=(-20, 20))\n                        ],\n                        p=0.1)\n                ],\n                keymap=dict(gt_mask='masks', img='image')),\n            dict(type='OutAlbu'),\n            dict(type='MergeImgMask'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='Pad', size_divisor=32),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='SafeCollect', keys=['img', 'gt_mask'])\n        ],\n        frame_limit=30,\n        shuffle_videos=True,\n        random_skip=False,\n        max_skip=5,\n        min_skip=1,\n        max_objs_per_gpu=4,\n        max_per_frame=2,\n        image_root='/data/YouTube/train_480p/JPEGImages',\n        mask_root='/data/YouTube/train_480p/Annotations'),\n    val=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/debug/JPEGImages',\n        mask_root='/data/YouTube/debug/valid_Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'),\n    test=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/valid/JPEGImages',\n        mask_root='/data/YouTube/valid/Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'))\noptimizer = dict(type='Adam', lr=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.3333333333333333,\n    step=[10000])\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\nfp16 = dict(loss_scale=512.0)\nevaluation = dict(start=100, save_best='mIoU', interval=200, by_epoch=False)\nwork_dir = 'work_dirs/stcn_ori_t4'\nvalidate = True\nauto_resume = False\ngpu_ids = range(0, 3)\nseed = 1\n", "seed": 1, "exp_name": "stcn_origin.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 0.00017, "memory": 6650, "data_time": 0.67276, "bce_p": 1.0, "loss": 119.53906, "time": 1.47671}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00018, "memory": 6650, "data_time": 0.57197, "bce_p": 1.0, "loss": 51.34655, "time": 1.332}
{"mode": "train", "epoch": 1, "iter": 75, "lr": 0.00019, "memory": 6650, "data_time": 0.63322, "bce_p": 1.0, "loss": 40.27663, "time": 1.38871}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0002, "memory": 6650, "data_time": 0.60807, "bce_p": 1.0, "loss": 35.8503, "time": 1.36156}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.0002, "mIoU": 0.19798, "F": 0.1636}
{"mode": "train", "epoch": 1, "iter": 125, "lr": 0.00021, "memory": 6650, "data_time": 3.14512, "bce_p": 1.0, "loss": 120.66747, "time": 3.90536}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00022, "memory": 6650, "data_time": 0.604, "bce_p": 1.0, "loss": 72.95821, "time": 1.39117}
{"mode": "train", "epoch": 1, "iter": 175, "lr": 0.00022, "memory": 7145, "data_time": 0.59812, "bce_p": 1.0, "loss": 21.57596, "time": 1.35396}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00023, "memory": 7145, "data_time": 0.50992, "bce_p": 1.0, "loss": 16.34226, "time": 1.23735}
{"mode": "train", "epoch": 1, "iter": 225, "lr": 0.00024, "memory": 7145, "data_time": 0.56875, "bce_p": 1.0, "loss": 10.26594, "time": 1.3393}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00025, "memory": 7145, "data_time": 0.67835, "bce_p": 1.0, "loss": 4.70692, "time": 1.49016}
{"mode": "train", "epoch": 1, "iter": 275, "lr": 0.00026, "memory": 7145, "data_time": 0.69944, "bce_p": 1.0, "loss": 4.32112, "time": 1.4835}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00027, "memory": 7145, "data_time": 0.68625, "bce_p": 1.0, "loss": 5.38553, "time": 1.48488}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.00027, "mIoU": 0.29419, "F": 0.21779}
{"mode": "train", "epoch": 1, "iter": 325, "lr": 0.00027, "memory": 7145, "data_time": 3.49497, "bce_p": 1.0, "loss": 4.90685, "time": 4.28781}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00028, "memory": 7145, "data_time": 0.67895, "bce_p": 1.0, "loss": 4.53591, "time": 1.44846}
{"mode": "train", "epoch": 1, "iter": 375, "lr": 0.00029, "memory": 7153, "data_time": 0.61496, "bce_p": 1.0, "loss": 3.30734, "time": 1.39737}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0003, "memory": 7153, "data_time": 0.60142, "bce_p": 1.0, "loss": 4.05764, "time": 1.33833}
{"mode": "train", "epoch": 1, "iter": 425, "lr": 0.00031, "memory": 7153, "data_time": 0.60166, "bce_p": 1.0, "loss": 3.27931, "time": 1.39749}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00032, "memory": 7153, "data_time": 0.51366, "bce_p": 1.0, "loss": 3.69464, "time": 1.29011}
{"mode": "train", "epoch": 1, "iter": 475, "lr": 0.00032, "memory": 7153, "data_time": 0.58176, "bce_p": 1.0, "loss": 3.35076, "time": 1.33368}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00033, "memory": 7153, "data_time": 0.59432, "bce_p": 1.0, "loss": 3.07074, "time": 1.38077}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.00033, "mIoU": 0.40363, "F": 0.28271}
{"mode": "train", "epoch": 1, "iter": 525, "lr": 0.00034, "memory": 7153, "data_time": 3.29302, "bce_p": 1.0, "loss": 3.52459, "time": 4.08205}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00035, "memory": 7153, "data_time": 0.66183, "bce_p": 1.0, "loss": 3.73201, "time": 1.42286}
{"mode": "train", "epoch": 1, "iter": 575, "lr": 0.00036, "memory": 7153, "data_time": 0.61389, "bce_p": 1.0, "loss": 2.7442, "time": 1.37791}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00037, "memory": 7153, "data_time": 0.57539, "bce_p": 1.0, "loss": 4.05089, "time": 1.33869}
{"mode": "train", "epoch": 1, "iter": 625, "lr": 0.00037, "memory": 7153, "data_time": 0.65963, "bce_p": 1.0, "loss": 4.96501, "time": 1.44611}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00038, "memory": 7153, "data_time": 0.66408, "bce_p": 1.0, "loss": 3.47576, "time": 1.43177}
{"mode": "train", "epoch": 1, "iter": 675, "lr": 0.00039, "memory": 7153, "data_time": 0.65375, "bce_p": 1.0, "loss": 2.80231, "time": 1.42636}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0004, "memory": 7153, "data_time": 0.67012, "bce_p": 1.0, "loss": 3.28131, "time": 1.43235}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.0004, "mIoU": 0.37854, "F": 0.29772}
{"mode": "train", "epoch": 1, "iter": 725, "lr": 0.00041, "memory": 7153, "data_time": 2.8986, "bce_p": 1.0, "loss": 2.09663, "time": 3.65022}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00042, "memory": 7153, "data_time": 0.48574, "bce_p": 1.0, "loss": 3.23635, "time": 1.2086}
{"mode": "train", "epoch": 1, "iter": 775, "lr": 0.00042, "memory": 7153, "data_time": 0.47206, "bce_p": 1.0, "loss": 2.33652, "time": 1.20149}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00043, "memory": 7153, "data_time": 0.46062, "bce_p": 1.0, "loss": 2.89717, "time": 1.19061}
{"mode": "train", "epoch": 1, "iter": 825, "lr": 0.00044, "memory": 7153, "data_time": 0.46276, "bce_p": 1.0, "loss": 2.31564, "time": 1.19629}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00045, "memory": 7153, "data_time": 0.46765, "bce_p": 1.0, "loss": 4.06507, "time": 1.20067}
{"mode": "train", "epoch": 1, "iter": 875, "lr": 0.00046, "memory": 7153, "data_time": 0.46712, "bce_p": 1.0, "loss": 3.77399, "time": 1.19963}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00047, "memory": 7153, "data_time": 0.46386, "bce_p": 1.0, "loss": 4.59207, "time": 1.19329}
{"mode": "val", "epoch": 1, "iter": 360, "lr": 0.00047, "mIoU": 0.36498, "F": 0.28821}
{"mode": "train", "epoch": 2, "iter": 25, "lr": 0.00048, "memory": 7153, "data_time": 0.56054, "bce_p": 1.0, "loss": 27.46713, "time": 1.30281}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00049, "memory": 7153, "data_time": 0.4735, "bce_p": 1.0, "loss": 12.14243, "time": 1.21362}
{"mode": "train", "epoch": 2, "iter": 75, "lr": 0.0005, "memory": 7153, "data_time": 0.46811, "bce_p": 1.0, "loss": 16.05652, "time": 1.1968}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0005, "memory": 7153, "data_time": 0.45225, "bce_p": 1.0, "loss": 7.78638, "time": 1.19436}
{"mode": "train", "epoch": 2, "iter": 125, "lr": 0.0005, "memory": 7153, "data_time": 0.45744, "bce_p": 1.0, "loss": 5.11877, "time": 1.1863}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0005, "memory": 7153, "data_time": 0.45331, "bce_p": 1.0, "loss": 3.12656, "time": 1.19969}
{"mode": "train", "epoch": 2, "iter": 175, "lr": 0.0005, "memory": 7153, "data_time": 0.49984, "bce_p": 1.0, "loss": 3.09801, "time": 1.30948}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.0005, "mIoU": 0.53293, "F": 0.45988}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0005, "memory": 7153, "data_time": 2.98998, "bce_p": 1.0, "loss": 2.44564, "time": 3.74443}
{"mode": "train", "epoch": 2, "iter": 225, "lr": 0.0005, "memory": 7153, "data_time": 0.45973, "bce_p": 1.0, "loss": 2.35625, "time": 1.22098}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0005, "memory": 7153, "data_time": 0.45787, "bce_p": 1.0, "loss": 1.99134, "time": 1.21485}
{"mode": "train", "epoch": 2, "iter": 275, "lr": 0.0005, "memory": 7153, "data_time": 0.461, "bce_p": 1.0, "loss": 2.07378, "time": 1.21173}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0005, "memory": 7153, "data_time": 0.46417, "bce_p": 1.0, "loss": 2.28256, "time": 1.22066}
{"mode": "train", "epoch": 2, "iter": 325, "lr": 0.0005, "memory": 7153, "data_time": 0.47377, "bce_p": 1.0, "loss": 2.14758, "time": 1.22205}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0005, "memory": 7153, "data_time": 0.46778, "bce_p": 1.0, "loss": 1.71539, "time": 1.20998}
{"mode": "train", "epoch": 2, "iter": 375, "lr": 0.0005, "memory": 7153, "data_time": 0.45725, "bce_p": 1.0, "loss": 1.58556, "time": 1.21598}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.0005, "mIoU": 0.54714, "F": 0.48224}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0005, "memory": 7153, "data_time": 2.93969, "bce_p": 1.0, "loss": 1.91532, "time": 3.73648}
{"mode": "train", "epoch": 2, "iter": 425, "lr": 0.0005, "memory": 7153, "data_time": 0.431, "bce_p": 1.0, "loss": 1.86632, "time": 1.23201}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0005, "memory": 7153, "data_time": 0.42468, "bce_p": 1.0, "loss": 2.46624, "time": 1.21791}
{"mode": "train", "epoch": 2, "iter": 475, "lr": 0.0005, "memory": 7153, "data_time": 0.40753, "bce_p": 1.0, "loss": 1.94318, "time": 1.18458}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0005, "memory": 7153, "data_time": 0.40952, "bce_p": 1.0, "loss": 1.56261, "time": 1.18484}
{"mode": "train", "epoch": 2, "iter": 525, "lr": 0.0005, "memory": 7153, "data_time": 0.42306, "bce_p": 1.0, "loss": 1.52616, "time": 1.18951}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.0005, "memory": 7153, "data_time": 0.41301, "bce_p": 1.0, "loss": 1.86946, "time": 1.24953}
{"mode": "train", "epoch": 2, "iter": 575, "lr": 0.0005, "memory": 7153, "data_time": 0.41235, "bce_p": 1.0, "loss": 1.42774, "time": 1.21806}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.0005, "mIoU": 0.58041, "F": 0.53628}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0005, "memory": 7153, "data_time": 3.01431, "bce_p": 1.0, "loss": 2.19145, "time": 3.77321}
{"mode": "train", "epoch": 2, "iter": 625, "lr": 0.0005, "memory": 7153, "data_time": 0.46234, "bce_p": 1.0, "loss": 2.14018, "time": 1.2003}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.0005, "memory": 7153, "data_time": 0.46871, "bce_p": 1.0, "loss": 1.44425, "time": 1.21616}
{"mode": "train", "epoch": 2, "iter": 675, "lr": 0.0005, "memory": 7153, "data_time": 0.46651, "bce_p": 1.0, "loss": 1.61894, "time": 1.20414}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.0005, "memory": 7153, "data_time": 0.46149, "bce_p": 1.0, "loss": 2.16678, "time": 1.20308}
{"mode": "train", "epoch": 2, "iter": 725, "lr": 0.0005, "memory": 7153, "data_time": 0.47014, "bce_p": 1.0, "loss": 1.58703, "time": 1.17737}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.0005, "memory": 7153, "data_time": 0.48238, "bce_p": 1.0, "loss": 1.38804, "time": 1.18629}
{"mode": "train", "epoch": 2, "iter": 775, "lr": 0.0005, "memory": 7153, "data_time": 0.4756, "bce_p": 1.0, "loss": 1.22382, "time": 1.1887}
{"mode": "val", "epoch": 2, "iter": 360, "lr": 0.0005, "mIoU": 0.60174, "F": 0.54616}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0005, "memory": 7153, "data_time": 3.01488, "bce_p": 1.0, "loss": 1.74491, "time": 3.75985}
{"mode": "train", "epoch": 2, "iter": 825, "lr": 0.0005, "memory": 7153, "data_time": 0.46273, "bce_p": 1.0, "loss": 2.01713, "time": 1.20777}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.0005, "memory": 7153, "data_time": 0.46363, "bce_p": 1.0, "loss": 1.66653, "time": 1.1957}
{"mode": "train", "epoch": 2, "iter": 875, "lr": 0.0005, "memory": 7153, "data_time": 0.45339, "bce_p": 1.0, "loss": 1.62751, "time": 1.19162}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.0005, "memory": 7153, "data_time": 0.4599, "bce_p": 1.0, "loss": 1.97301, "time": 1.19792}
{"mode": "train", "epoch": 3, "iter": 25, "lr": 0.0005, "memory": 7153, "data_time": 0.53995, "bce_p": 1.0, "loss": 3.67936, "time": 1.28676}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0005, "memory": 7153, "data_time": 0.45889, "bce_p": 1.0, "loss": 1.68841, "time": 1.19876}
{"mode": "val", "epoch": 3, "iter": 360, "lr": 0.0005, "mIoU": 0.56764, "F": 0.51651}
{"mode": "train", "epoch": 3, "iter": 75, "lr": 0.0005, "memory": 7153, "data_time": 3.16454, "bce_p": 1.0, "loss": 3.11324, "time": 3.91018}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0005, "memory": 7153, "data_time": 0.45893, "bce_p": 1.0, "loss": 2.04452, "time": 1.2086}
{"mode": "train", "epoch": 3, "iter": 125, "lr": 0.0005, "memory": 7153, "data_time": 0.46525, "bce_p": 1.0, "loss": 1.40608, "time": 1.21173}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0005, "memory": 7153, "data_time": 0.46043, "bce_p": 1.0, "loss": 1.93437, "time": 1.20374}
{"mode": "train", "epoch": 3, "iter": 175, "lr": 0.0005, "memory": 7153, "data_time": 0.46181, "bce_p": 1.0, "loss": 1.67809, "time": 1.21274}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0005, "memory": 7153, "data_time": 0.45758, "bce_p": 1.0, "loss": 1.36748, "time": 1.20538}
{"mode": "train", "epoch": 3, "iter": 225, "lr": 0.0005, "memory": 7153, "data_time": 0.45882, "bce_p": 1.0, "loss": 2.55721, "time": 1.21143}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0005, "memory": 7153, "data_time": 0.46435, "bce_p": 1.0, "loss": 1.31625, "time": 1.20551}
{"mode": "val", "epoch": 3, "iter": 360, "lr": 0.0005, "mIoU": 0.61578, "F": 0.58453}
{"mode": "train", "epoch": 3, "iter": 275, "lr": 0.0005, "memory": 7153, "data_time": 3.21035, "bce_p": 1.0, "loss": 1.67772, "time": 3.94272}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0005, "memory": 7153, "data_time": 0.46499, "bce_p": 1.0, "loss": 1.90206, "time": 1.194}
{"mode": "train", "epoch": 3, "iter": 325, "lr": 0.0005, "memory": 7153, "data_time": 0.47678, "bce_p": 1.0, "loss": 1.51267, "time": 1.18782}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.0005, "memory": 7153, "data_time": 0.45391, "bce_p": 1.0, "loss": 1.3965, "time": 1.16098}
{"mode": "train", "epoch": 3, "iter": 375, "lr": 0.0005, "memory": 7153, "data_time": 0.45325, "bce_p": 1.0, "loss": 1.6962, "time": 1.15366}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0005, "memory": 7153, "data_time": 0.46252, "bce_p": 1.0, "loss": 1.53765, "time": 1.17285}
{"mode": "train", "epoch": 3, "iter": 425, "lr": 0.0005, "memory": 7153, "data_time": 0.4588, "bce_p": 1.0, "loss": 1.09187, "time": 1.20256}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.0005, "memory": 7153, "data_time": 0.47219, "bce_p": 1.0, "loss": 1.39222, "time": 1.19782}
{"mode": "val", "epoch": 3, "iter": 360, "lr": 0.0005, "mIoU": 0.61696, "F": 0.5619}
{"mode": "train", "epoch": 3, "iter": 475, "lr": 0.0005, "memory": 7153, "data_time": 3.21941, "bce_p": 1.0, "loss": 1.42665, "time": 3.95589}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.0005, "memory": 7153, "data_time": 0.46503, "bce_p": 1.0, "loss": 1.84632, "time": 1.19451}
{"mode": "train", "epoch": 3, "iter": 525, "lr": 0.0005, "memory": 7153, "data_time": 0.46186, "bce_p": 1.0, "loss": 1.73789, "time": 1.19394}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.0005, "memory": 7153, "data_time": 0.47096, "bce_p": 1.0, "loss": 1.22364, "time": 1.19681}
{"mode": "train", "epoch": 3, "iter": 575, "lr": 0.0005, "memory": 7153, "data_time": 0.47127, "bce_p": 1.0, "loss": 0.99589, "time": 1.20105}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.0005, "memory": 7153, "data_time": 0.46375, "bce_p": 1.0, "loss": 1.40094, "time": 1.20037}
{"mode": "train", "epoch": 3, "iter": 625, "lr": 0.0005, "memory": 7153, "data_time": 0.45862, "bce_p": 1.0, "loss": 1.5275, "time": 1.19777}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.0005, "memory": 7153, "data_time": 0.46597, "bce_p": 1.0, "loss": 1.05392, "time": 1.19312}
{"mode": "val", "epoch": 3, "iter": 360, "lr": 0.0005, "mIoU": 0.62232, "F": 0.59573}
{"mode": "train", "epoch": 3, "iter": 675, "lr": 0.0005, "memory": 7153, "data_time": 3.1875, "bce_p": 1.0, "loss": 1.50804, "time": 3.9426}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.0005, "memory": 7153, "data_time": 0.43956, "bce_p": 1.0, "loss": 1.59811, "time": 1.19374}
{"mode": "train", "epoch": 3, "iter": 725, "lr": 0.0005, "memory": 7153, "data_time": 0.4291, "bce_p": 1.0, "loss": 1.33673, "time": 1.18418}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.0005, "memory": 7153, "data_time": 0.43636, "bce_p": 1.0, "loss": 1.95701, "time": 1.19868}
{"mode": "train", "epoch": 3, "iter": 775, "lr": 0.0005, "memory": 7153, "data_time": 0.43153, "bce_p": 1.0, "loss": 1.43585, "time": 1.19023}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.0005, "memory": 7153, "data_time": 0.43786, "bce_p": 1.0, "loss": 1.34163, "time": 1.19183}
{"mode": "train", "epoch": 3, "iter": 825, "lr": 0.0005, "memory": 7153, "data_time": 0.43059, "bce_p": 1.0, "loss": 1.47446, "time": 1.18739}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.0005, "memory": 7153, "data_time": 0.42708, "bce_p": 1.0, "loss": 1.3797, "time": 1.18875}
{"mode": "val", "epoch": 3, "iter": 360, "lr": 0.0005, "mIoU": 0.62364, "F": 0.60065}
{"mode": "train", "epoch": 3, "iter": 875, "lr": 0.0005, "memory": 7153, "data_time": 3.18447, "bce_p": 1.0, "loss": 1.36601, "time": 3.89021}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.0005, "memory": 7153, "data_time": 0.45997, "bce_p": 1.0, "loss": 1.61622, "time": 1.18877}
{"mode": "train", "epoch": 4, "iter": 25, "lr": 0.0005, "memory": 7153, "data_time": 0.53651, "bce_p": 1.0, "loss": 3.93366, "time": 1.27241}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0005, "memory": 7153, "data_time": 0.479, "bce_p": 1.0, "loss": 1.34197, "time": 1.21648}
{"mode": "train", "epoch": 4, "iter": 75, "lr": 0.0005, "memory": 7153, "data_time": 0.46912, "bce_p": 1.0, "loss": 1.69655, "time": 1.204}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0005, "memory": 7153, "data_time": 0.45689, "bce_p": 1.0, "loss": 1.40777, "time": 1.16759}
{"mode": "train", "epoch": 4, "iter": 125, "lr": 0.0005, "memory": 7153, "data_time": 0.45369, "bce_p": 1.0, "loss": 1.0489, "time": 1.18842}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.57663, "F": 0.51507}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0005, "memory": 7153, "data_time": 3.3592, "bce_p": 1.0, "loss": 1.03197, "time": 4.12117}
{"mode": "train", "epoch": 4, "iter": 175, "lr": 0.0005, "memory": 7153, "data_time": 0.45045, "bce_p": 1.0, "loss": 2.1969, "time": 1.21783}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0005, "memory": 7153, "data_time": 0.45951, "bce_p": 1.0, "loss": 1.24761, "time": 1.22951}
{"mode": "train", "epoch": 4, "iter": 225, "lr": 0.0005, "memory": 7153, "data_time": 0.47342, "bce_p": 1.0, "loss": 2.67959, "time": 1.21726}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0005, "memory": 7153, "data_time": 0.46583, "bce_p": 1.0, "loss": 89.2955, "time": 1.20371}
{"mode": "train", "epoch": 4, "iter": 275, "lr": 0.0005, "memory": 7153, "data_time": 0.46754, "bce_p": 1.0, "loss": 5337.8793, "time": 1.21133}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0005, "memory": 7153, "data_time": 0.46342, "bce_p": 1.0, "loss": 178.411, "time": 1.20041}
{"mode": "train", "epoch": 4, "iter": 325, "lr": 0.0005, "memory": 7153, "data_time": 0.45898, "bce_p": 1.0, "loss": 48.59242, "time": 1.20713}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.06003, "F": 0.08052}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0005, "memory": 7153, "data_time": 3.40928, "bce_p": 1.0, "loss": 12.28088, "time": 4.14368}
{"mode": "train", "epoch": 4, "iter": 375, "lr": 0.0005, "memory": 7153, "data_time": 0.46231, "bce_p": 1.0, "loss": 10.27893, "time": 1.19}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0005, "memory": 7153, "data_time": 0.46819, "bce_p": 1.0, "loss": 8.62366, "time": 1.19833}
{"mode": "train", "epoch": 4, "iter": 425, "lr": 0.0005, "memory": 7153, "data_time": 0.46898, "bce_p": 1.0, "loss": 6.32948, "time": 1.20272}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0005, "memory": 7153, "data_time": 0.4546, "bce_p": 1.0, "loss": 8.21968, "time": 1.2056}
{"mode": "train", "epoch": 4, "iter": 475, "lr": 0.0005, "memory": 7153, "data_time": 0.46063, "bce_p": 1.0, "loss": 7.18056, "time": 1.21318}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0005, "memory": 7153, "data_time": 0.46032, "bce_p": 1.0, "loss": 6.94128, "time": 1.20156}
{"mode": "train", "epoch": 4, "iter": 525, "lr": 0.0005, "memory": 7153, "data_time": 0.45743, "bce_p": 1.0, "loss": 5.6044, "time": 1.1945}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.10699, "F": 0.1436}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.0005, "memory": 7153, "data_time": 3.43488, "bce_p": 1.0, "loss": 7.42689, "time": 4.17082}
{"mode": "train", "epoch": 4, "iter": 575, "lr": 0.0005, "memory": 7153, "data_time": 0.46308, "bce_p": 1.0, "loss": 5.66176, "time": 1.20192}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.0005, "memory": 7153, "data_time": 0.45805, "bce_p": 1.0, "loss": 8.13777, "time": 1.19457}
{"mode": "train", "epoch": 4, "iter": 625, "lr": 0.0005, "memory": 7153, "data_time": 0.45503, "bce_p": 1.0, "loss": 5.37243, "time": 1.18836}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.0005, "memory": 7153, "data_time": 0.46916, "bce_p": 1.0, "loss": 6.66874, "time": 1.18898}
{"mode": "train", "epoch": 4, "iter": 675, "lr": 0.0005, "memory": 7153, "data_time": 0.45272, "bce_p": 1.0, "loss": 4.9867, "time": 1.1586}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.0005, "memory": 7153, "data_time": 0.46263, "bce_p": 1.0, "loss": 6.70199, "time": 1.19704}
{"mode": "train", "epoch": 4, "iter": 725, "lr": 0.0005, "memory": 7153, "data_time": 0.46302, "bce_p": 1.0, "loss": 8.09498, "time": 1.20286}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.09985, "F": 0.13783}
{"mode": "train", "epoch": 4, "iter": 750, "lr": 0.0005, "memory": 7153, "data_time": 3.45545, "bce_p": 1.0, "loss": 4.73822, "time": 4.19304}
