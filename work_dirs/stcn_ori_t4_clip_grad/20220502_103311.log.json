{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.23.0+5f80d73", "config": "model = dict(\n    type='STCN',\n    init_cfg=dict(type='Kaiming', layer='Conv2d'),\n    seg_background=False,\n    max_per_frame=2,\n    key_encoder=dict(\n        type='KeyEncoder',\n        backbone=dict(\n            type='ResNet',\n            depth=50,\n            out_indices=(0, 1, 2),\n            frozen_stages=3,\n            init_cfg=dict(\n                type='Pretrained', checkpoint='torchvision://resnet50')),\n        key_proj=dict(\n            type='KeyProjection', indim=1024, keydim=64, ortho_init=True),\n        key_comp=dict(type='KeyProjection', indim=1024, keydim=512)),\n    value_encoder=dict(\n        type='ValueEncoder',\n        backbone=dict(\n            type='ResNet', depth=18, in_channels=4, out_indices=(2, )),\n        feature_fusion=dict(type='FeatureFusionBlock', indim=1280,\n                            outdim=512)),\n    mask_decoder=dict(type='MaskDecoder', indim=512),\n    memory=dict(\n        type='AffinityMemoryBank',\n        top_k=-1,\n        mem_every=5,\n        include_last=False,\n        thin_reading_scale=8),\n    loss_fn=dict(\n        type='BootstrappedCE', start_warm=10000, end_warm=40000, top_p=0.15))\ncustom_imports = dict(\n    imports=['stcn.loss.bce', 'stcn.model'], allow_failed_imports=False)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=25,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nfind_unused_parameters = True\ndata = dict(\n    workers_per_gpu=0,\n    samples_per_gpu=4,\n    nums_frame=4,\n    train=dict(\n        type='VOSDataset',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='EnAlbu'),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomResizedCrop',\n                        height=480,\n                        width=896,\n                        scale=(0.8, 1.0),\n                        ratio=(0.7, 1.3),\n                        p=1),\n                    dict(type='ShiftScaleRotate', p=0.9),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(type='ChannelShuffle', p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                p=1.0,\n                                r_shift_limit=(-20, 20),\n                                g_shift_limit=(-20, 20),\n                                b_shift_limit=(-20, 20))\n                        ],\n                        p=0.1)\n                ],\n                keymap=dict(gt_mask='masks', img='image')),\n            dict(type='OutAlbu'),\n            dict(type='MergeImgMask'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='Pad', size_divisor=32),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='SafeCollect', keys=['img', 'gt_mask'])\n        ],\n        frame_limit=30,\n        shuffle_videos=True,\n        random_skip=False,\n        max_skip=5,\n        min_skip=1,\n        max_objs_per_gpu=4,\n        max_per_frame=2,\n        image_root='/data/YouTube/train_480p/JPEGImages',\n        mask_root='/data/YouTube/train_480p/Annotations'),\n    val=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/debug/JPEGImages',\n        mask_root='/data/YouTube/debug/valid_Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'),\n    test=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/valid/JPEGImages',\n        mask_root='/data/YouTube/valid/Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'))\noptimizer = dict(type='Adam', lr=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.3333333333333333,\n    step=[10000])\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\nfp16 = dict(loss_scale=512.0)\nevaluation = dict(start=100, save_best='mIoU', interval=200, by_epoch=False)\nwork_dir = 'work_dirs/stcn_ori_t4'\nvalidate = True\nauto_resume = False\ngpu_ids = range(0, 3)\nseed = 1\n", "seed": 1, "exp_name": "stcn_origin.py", "hook_msgs": {"best_score": 0.6236410521689322, "best_ckpt": "/home/zh21/code/stcn_mmcv/work_dirs/stcn_ori_t4/best_mIoU_iter_2700.pth", "last_ckpt": "/home/zh21/code/stcn_mmcv/work_dirs/stcn_ori_t4/epoch_2.pth"}, "fp16": {"loss_scaler": {"scale": 512.0, "growth_factor": 2.0, "backoff_factor": 0.5, "growth_interval": 2000, "_growth_tracker": 0}}, "epoch": 3, "iter": 2699, "mmcv_version": "1.5.0", "time": "Mon May  2 10:09:39 2022"}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.62364, "F": 0.60065}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.61517, "F": 0.58685}
{"mode": "train", "epoch": 4, "iter": 25, "lr": 0.0005, "memory": 6648, "data_time": 2.78745, "bce_p": 1.0, "loss": 1.66504, "grad_norm": 20.58372, "time": 3.52148}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0005, "memory": 6648, "data_time": 0.479, "bce_p": 1.0, "loss": 1.06668, "grad_norm": 19.57049, "time": 1.20821}
{"mode": "train", "epoch": 4, "iter": 75, "lr": 0.0005, "memory": 6648, "data_time": 0.47665, "bce_p": 1.0, "loss": 1.47976, "grad_norm": 17.87329, "time": 1.21385}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0005, "memory": 6648, "data_time": 0.46874, "bce_p": 1.0, "loss": 1.15987, "grad_norm": 15.73261, "time": 1.20116}
{"mode": "train", "epoch": 4, "iter": 125, "lr": 0.0005, "memory": 6648, "data_time": 0.48216, "bce_p": 1.0, "loss": 0.81487, "grad_norm": 14.03734, "time": 1.20492}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0005, "memory": 6648, "data_time": 0.4789, "bce_p": 1.0, "loss": 1.18526, "grad_norm": 18.34633, "time": 1.21038}
{"mode": "train", "epoch": 4, "iter": 175, "lr": 0.0005, "memory": 7153, "data_time": 0.48947, "bce_p": 1.0, "loss": 1.37989, "grad_norm": 20.45057, "time": 1.21842}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0005, "memory": 7153, "data_time": 0.4779, "bce_p": 1.0, "loss": 0.70333, "grad_norm": 16.15055, "time": 1.21197}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.62359, "F": 0.60436}
{"mode": "train", "epoch": 4, "iter": 225, "lr": 0.0005, "memory": 7153, "data_time": 2.77344, "bce_p": 1.0, "loss": 1.79653, "grad_norm": 24.02852, "time": 3.49}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0005, "memory": 7153, "data_time": 0.46529, "bce_p": 1.0, "loss": 1.31521, "grad_norm": 23.65124, "time": 1.18248}
{"mode": "train", "epoch": 4, "iter": 275, "lr": 0.0005, "memory": 7153, "data_time": 0.48191, "bce_p": 1.0, "loss": 1.49325, "grad_norm": 24.02398, "time": 1.21184}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0005, "memory": 7153, "data_time": 0.48734, "bce_p": 1.0, "loss": 1.41543, "grad_norm": 29.99862, "time": 1.21224}
{"mode": "train", "epoch": 4, "iter": 325, "lr": 0.0005, "memory": 7153, "data_time": 0.47278, "bce_p": 1.0, "loss": 1.07444, "grad_norm": 16.12945, "time": 1.20211}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0005, "memory": 7153, "data_time": 0.47538, "bce_p": 1.0, "loss": 0.86749, "grad_norm": 17.62716, "time": 1.20522}
{"mode": "train", "epoch": 4, "iter": 375, "lr": 0.0005, "memory": 7153, "data_time": 0.47565, "bce_p": 1.0, "loss": 1.50211, "grad_norm": 19.33658, "time": 1.20374}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0005, "memory": 7159, "data_time": 0.48537, "bce_p": 1.0, "loss": 1.29315, "grad_norm": 20.94669, "time": 1.21062}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.62262, "F": 0.57457}
{"mode": "train", "epoch": 4, "iter": 425, "lr": 0.0005, "memory": 7159, "data_time": 2.78936, "bce_p": 1.0, "loss": 1.15035, "grad_norm": 18.7384, "time": 3.50412}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0005, "memory": 7159, "data_time": 0.47098, "bce_p": 1.0, "loss": 1.55338, "grad_norm": 25.99596, "time": 1.18829}
{"mode": "train", "epoch": 4, "iter": 475, "lr": 0.0005, "memory": 7159, "data_time": 0.4825, "bce_p": 1.0, "loss": 1.22519, "grad_norm": 23.83291, "time": 1.20203}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0005, "memory": 7159, "data_time": 0.4871, "bce_p": 1.0, "loss": 1.15273, "grad_norm": 21.1282, "time": 1.2169}
{"mode": "train", "epoch": 4, "iter": 525, "lr": 0.0005, "memory": 7159, "data_time": 0.47203, "bce_p": 1.0, "loss": 0.93858, "grad_norm": 15.52987, "time": 1.20019}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.0005, "memory": 7159, "data_time": 0.49801, "bce_p": 1.0, "loss": 1.83591, "grad_norm": 23.48064, "time": 1.22391}
{"mode": "train", "epoch": 4, "iter": 575, "lr": 0.0005, "memory": 7159, "data_time": 0.48393, "bce_p": 1.0, "loss": 1.16978, "grad_norm": 18.36714, "time": 1.20996}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.0005, "memory": 7159, "data_time": 0.4769, "bce_p": 1.0, "loss": 1.59576, "grad_norm": 24.7415, "time": 1.20758}
{"mode": "val", "epoch": 4, "iter": 360, "lr": 0.0005, "mIoU": 0.63259, "F": 0.61141}
{"mode": "train", "epoch": 4, "iter": 625, "lr": 0.0005, "memory": 7159, "data_time": 2.83909, "bce_p": 1.0, "loss": 1.28853, "grad_norm": 24.40551, "time": 3.5666}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.0005, "memory": 7159, "data_time": 0.4692, "bce_p": 1.0, "loss": 1.09271, "grad_norm": 19.46505, "time": 1.19401}
{"mode": "train", "epoch": 4, "iter": 675, "lr": 0.0005, "memory": 7159, "data_time": 0.46924, "bce_p": 1.0, "loss": 1.22888, "grad_norm": 22.96342, "time": 1.19965}
