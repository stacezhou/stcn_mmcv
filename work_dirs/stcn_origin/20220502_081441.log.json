{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.5\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.23.0+cd0fac3", "config": "model = dict(\n    type='STCN',\n    init_cfg=dict(type='Kaiming', layer='Conv2d'),\n    seg_background=False,\n    max_per_frame=2,\n    key_encoder=dict(\n        type='KeyEncoder',\n        backbone=dict(\n            type='ResNet',\n            depth=50,\n            out_indices=(0, 1, 2),\n            frozen_stages=3,\n            init_cfg=dict(\n                type='Pretrained', checkpoint='torchvision://resnet50')),\n        key_proj=dict(\n            type='KeyProjection', indim=1024, keydim=64, ortho_init=True),\n        key_comp=dict(type='KeyProjection', indim=1024, keydim=512)),\n    value_encoder=dict(\n        type='ValueEncoder',\n        backbone=dict(\n            type='ResNet', depth=18, in_channels=4, out_indices=(2, )),\n        feature_fusion=dict(type='FeatureFusionBlock', indim=1280,\n                            outdim=512)),\n    mask_decoder=dict(type='MaskDecoder', indim=512),\n    memory=dict(\n        type='AffinityMemoryBank',\n        top_k=-1,\n        mem_every=5,\n        include_last=False,\n        thin_reading_scale=8),\n    loss_fn=dict(\n        type='BootstrappedCE', start_warm=10000, end_warm=40000, top_p=0.15))\ncustom_imports = dict(\n    imports=['stcn.loss.bce', 'stcn.model'], allow_failed_imports=False)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=25,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nfind_unused_parameters = True\ndata = dict(\n    workers_per_gpu=0,\n    samples_per_gpu=4,\n    nums_frame=3,\n    train=dict(\n        type='VOSDataset',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='EnAlbu'),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='RandomResizedCrop',\n                        height=480,\n                        width=896,\n                        scale=(0.8, 1.0),\n                        ratio=(0.7, 1.3),\n                        p=1),\n                    dict(type='ShiftScaleRotate', p=0.9),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=[0.1, 0.3],\n                        contrast_limit=[0.1, 0.3],\n                        p=0.2),\n                    dict(type='ChannelShuffle', p=0.1),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                p=1.0,\n                                r_shift_limit=(-20, 20),\n                                g_shift_limit=(-20, 20),\n                                b_shift_limit=(-20, 20))\n                        ],\n                        p=0.1)\n                ],\n                keymap=dict(gt_mask='masks', img='image')),\n            dict(type='OutAlbu'),\n            dict(type='MergeImgMask'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='Pad', size_divisor=32),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='SafeCollect', keys=['img', 'gt_mask'])\n        ],\n        frame_limit=30,\n        shuffle_videos=True,\n        random_skip=False,\n        max_skip=5,\n        min_skip=1,\n        max_objs_per_gpu=4,\n        max_per_frame=2,\n        image_root='/data/YouTube/train_480p/JPEGImages',\n        mask_root='/data/YouTube/train_480p/Annotations'),\n    val=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/debug/JPEGImages',\n        mask_root='/data/YouTube/debug/valid_Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'),\n    test=dict(\n        type='VOSDataset',\n        test_mode=True,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadMaskFromFile'),\n            dict(type='MergeImgMask'),\n            dict(type='Pad', size_divisor=16),\n            dict(type='SplitImgMask'),\n            dict(type='ImageToTensor', keys=['gt_mask']),\n            dict(\n                type='ToDataContainer',\n                fields=({\n                    'key': 'gt_mask',\n                    'stack': True\n                }, )),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img', 'gt_mask'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        wo_mask_pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Pad', size_divisor=16),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='SafeCollect',\n                keys=['img'],\n                meta_keys=('flag', 'filename', 'ori_filename', 'labels',\n                           'ori_shape', 'img_shape', 'pad_shape',\n                           'scale_factor', 'flip', 'flip_direction',\n                           'img_norm_cfg'))\n        ],\n        image_root='/data/YouTube/valid/JPEGImages',\n        mask_root='/data/YouTube/valid/Annotations',\n        palette='/data/YouTube/valid/Annotations/0a49f5265b/00000.png'))\noptimizer = dict(type='Adam', lr=0.0005)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.3333333333333333,\n    step=[10000])\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\nfp16 = dict(loss_scale=512.0)\nevaluation = dict(start=100, save_best='mIoU', interval=200, by_epoch=False)\nwork_dir = './work_dirs/stcn_origin'\nvalidate = True\nauto_resume = False\ngpu_ids = range(0, 3)\nseed = 0\n", "seed": 0, "exp_name": "stcn_origin.py", "hook_msgs": {}}
